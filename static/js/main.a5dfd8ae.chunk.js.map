{"version":3,"sources":["Header.js","Buttons.js","Controls.js","DonutChart.js","components/RecipeList.js","components/RecipeCard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","React","createElement","className","Buttons","_ref","handleAdd","handleRandom","handleDelete","onClick","Controls","newRecipe","setNewRecipe","ingredients","setIngredients","selectedCategory","setSelectedCategory","newImage","setNewImage","ingredientInput","setIngredientInput","useState","error","setError","value","onChange","e","target","type","placeholder","trimStart","length","maxLength","style","color","fontSize","marginTop","display","margin","accept","file","files","reader","FileReader","onloadend","result","readAsDataURL","src","alt","width","height","objectFit","borderRadius","border","handleAddIngredient","trim","map","item","index","key","updated","filter","_","i","handleRemoveIngredient","handleAddWithValidation","ChartJS","register","ArcElement","Tooltip","Legend","DonutChart","recipes","fixedCategories","categoryCounts","category","recipe","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","Doughnut","options","responsive","layout","padding","right","plugins","legend","position","font","size","RecipeList","onSelectRecipe","name","RecipeCard","onClose","onDelete","onUpdate","isEditing","setIsEditing","editedName","setEditedName","editedCategory","setEditedCategory","editedIngredients","setEditedIngredients","editedImage","setEditedImage","image","useEffect","fileUrl","startsWith","URL","revokeObjectURL","handleSaveEdit","updatedRecipe","Fragment","App","setRecipes","saved","localStorage","getItem","JSON","parse","selectedRecipe","setSelectedRecipe","setItem","stringify","textAlign","recipeData","random","Math","floor","slice","handleCloseCard","nameToDelete","r","updatedRecipes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a5dfd8ae.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\">RecipeVault</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Buttons =({ handleAdd, handleRandom, handleDelete }) => {\r\n    return (\r\n        <div>\r\n            <button className=\"btn-primary\" onClick={handleAdd}>Submit Recipe</button>\r\n            <button className=\"btn=primary\" onClick={handleRandom}>Random Recipe</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React, { useState } from 'react';\r\nimport Buttons from './Buttons';\r\n\r\nconst Controls =({ newRecipe, setNewRecipe, ingredients, setIngredients, handleAdd, handleRandom, handleDelete, selectedCategory, setSelectedCategory, newImage, setNewImage }) => {\r\n    const [ingredientInput, setIngredientInput] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        const value = e.target.value.trimStart();\r\n        if (value.length > 50) return; // extra safety check\r\n        setNewRecipe(value);\r\n        if (error) setError(''); //clear error on typing\r\n    };\r\n\r\n    const handleAddIngredient = () => {\r\n        if (ingredientInput.trim() !== '') {\r\n            setIngredients([...ingredients, ingredientInput.trim()]);\r\n            setIngredientInput('');\r\n        }\r\n    };\r\n\r\n    const handleRemoveIngredient = (index) => {\r\n        const updated = ingredients.filter((_, i) => i !== index);\r\n        setIngredients(updated);\r\n    };\r\n\r\n    const handleAddWithValidation = () => {\r\n        if (newRecipe.trim() === '') {\r\n            setError('Please enter a recipe name.');\r\n            return;\r\n        }\r\n        handleAdd(); // call parent handler\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* Category Dropdown */}\r\n            <select\r\n                className=\"category-dropdown\"\r\n                value={selectedCategory}\r\n                onChange={(e) => setSelectedCategory(e.target.value)}\r\n            >\r\n                <option value=\"\">Recipe Category</option>\r\n                <option value=\"Breakfast\">Breakfast</option>\r\n                <option value=\"Lunch\">Lunch</option>\r\n                <option value=\"Dinner\">Dinner</option>\r\n                <option value=\"Dessert\">Dessert</option>\r\n                <option value=\"Snack/Other\">Snack/Other</option>\r\n            </select>\r\n\r\n            {/* Recipe Input */}\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Enter recipe name...\"\r\n                value={newRecipe}\r\n                onChange={handleInputChange}\r\n                className=\"input-field\"\r\n                maxLength={50}\r\n            />\r\n            {error && (\r\n                <div style={{ color: 'red', fontSize: '16px', marginTop: '4px'}}>\r\n                    {error}\r\n                </div>\r\n            )}\r\n\r\n                {/* Image Upload Input */}\r\n                <label style={{ display: 'block', margin: '8px 0 4px', fontSize: '18px' }}>Recipe Image:</label>\r\n                <input\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    onChange={(e) => {\r\n                        const file = e.target.files[0];\r\n                        if (file) {\r\n                            const reader = new FileReader();\r\n                            reader.onloadend = () => {\r\n                                setNewImage(reader.result); // stores base64 string\r\n                            };\r\n                            reader.readAsDataURL(file);\r\n                        }\r\n                    }}\r\n                    className=\"input-field\"\r\n                />\r\n                {newImage && (\r\n                    <img\r\n                        src={newImage}\r\n                        alt=\"Preview\"\r\n                        style={{\r\n                            marginTop: '8px',\r\n                            width: '100px',\r\n                            height: '100px',\r\n                            objectFit: 'cover',\r\n                            borderRadius: '8px',\r\n                            border: '1px solid #0F7173'\r\n                        }}\r\n                    />\r\n                )}\r\n            <div className=\"ingredient-section\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter ingredient...\"\r\n                    value={ingredientInput}\r\n                    onChange={(e) => setIngredientInput(e.target.value)}\r\n                    className=\"input-field ingredient-input\"\r\n                    maxLength={50}\r\n                />\r\n                <button className=\"btn-secondary\" onClick={handleAddIngredient}>\r\n                    Add ingredient\r\n                </button>\r\n            </div>\r\n            {ingredients.length > 0 && (\r\n                <ul className=\"ingredient-list\">\r\n                    {ingredients.map((item, index) => (\r\n                        <li key={index} className=\"ingredient-item\">\r\n                            {item}\r\n                            <button className=\"remove-btn\" onClick={() => handleRemoveIngredient(index)}>\r\n                                Remove\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n            <Buttons\r\n                handleAdd={handleAddWithValidation}\r\n                handleRandom={handleRandom}\r\n                handleDelete={handleDelete}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Controls;","import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend, } from 'chart.js';\r\nimport './DonutChart.css';\r\n\r\n// Register chart components\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst DonutChart = ({ recipes }) => {\r\n  // Fixed category order\r\nconst fixedCategories = ['Breakfast', 'Lunch', 'Dinner', 'Dessert', 'Snack/Other'];\r\n\r\n// Count recipes per fixed category\r\nconst categoryCounts = fixedCategories.map(category =>\r\n    recipes.filter(recipe => recipe.category === category).length\r\n);\r\n\r\n// Matching fixed color palette\r\nconst categoryColors = [\r\n  '#FFA500', // Sunny Orange - Breakfast\r\n  '#78AB46', // Green Apple Peel - Lunch\r\n  '#7B2C3B', // Burgundy Roast - Dinner\r\n  '#F78DA7', // Strawberry Frosting - Dessert\r\n  '#2BC0E4', // Frozen Blue Raspberry - Snack/Other\r\n];\r\n\r\n// Final data object\r\nconst data = {\r\n    labels: fixedCategories,\r\n    datasets: [\r\n        {\r\n            label: 'Recipes per Category',\r\n            data: categoryCounts,\r\n            backgroundColor: categoryColors,\r\n            borderColor: '#ffffff',\r\n            borderWidth: 2,\r\n        },\r\n    ],\r\n};\r\n\r\n    const options = {\r\n        responsive: true,\r\n        layout: {\r\n            padding: {\r\n                right: 0\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                position: 'right',\r\n                labels: {\r\n                    color: '#333',\r\n                    font: {\r\n                    size: 16,\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div className=\"donut-chart\">\r\n            {recipes.length > 0 ? (\r\n                <div className=\"chart-wrapper\">\r\n                    <h3 className=\"chart-title\">Recipe Breakdown:</h3>\r\n                    <div className=\"chart-box\">\r\n                    <Doughnut data={data} options={options} style={{ marginTop: '20px' }} />\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <p className=\"chart-placeholder\">Add some recipes to see the chart!</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DonutChart;\r\n","import React from 'react';\r\nimport './RecipeList.css';\r\n\r\nconst RecipeList = ({ recipes, onSelectRecipe }) => {\r\n    return (\r\n        <div className=\"recipe-list-section\">\r\n            <h3 className=\"recipe-list-title\">Saved Recipes</h3>\r\n            {recipes.length === 0 ? (\r\n                <p>No recipes added yet.</p>\r\n            ) : (\r\n                <ul className=\"recipe-list\">\r\n                    {recipes.map((recipe, index) => (\r\n                        <li key={index} className=\"recipe-item\">\r\n                            {recipe.name}\r\n                            <button className=\"view-btn\" onClick={() => onSelectRecipe(recipe)}>+</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecipeList;","import React, { useState, useEffect } from 'react';\r\nimport './RecipeCard.css';\r\n\r\nconst RecipeCard = ({ recipe, onClose, onDelete, onUpdate }) => {\r\n    const [isEditing, setIsEditing] = useState(false); // Toggle edit mode\r\n    const [editedName, setEditedName] = useState(recipe.name);\r\n    const [editedCategory, setEditedCategory] = useState(recipe.category);\r\n    const [editedIngredients, setEditedIngredients] = useState(recipe.ingredients);\r\n    const [editedImage, setEditedImage] = useState(recipe.image || '');\r\n\r\n    useEffect(() => {\r\n        let fileUrl;\r\n        \r\n        // If it's an object URL, set it and prepare to clean up\r\n        if (editedImage && editedImage.startsWith('blob:')) {\r\n            fileUrl = editedImage;\r\n        }\r\n        \r\n        return () => {\r\n            if (fileUrl) {\r\n                URL.revokeObjectURL(fileUrl);\r\n            }\r\n        };\r\n    }, [editedImage]);\r\n\r\n    if (!recipe) return null;\r\n\r\n    const handleSaveEdit = () => {\r\n        const updatedRecipe = {\r\n            ...recipe,\r\n            name: editedName,\r\n            category: editedCategory,\r\n            ingredients: editedIngredients,\r\n            image: editedImage,\r\n        };\r\n\r\n        onUpdate(updatedRecipe); \r\n        setIsEditing(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"recipe-card-overlay\">\r\n            <div className=\"recipe-card\">\r\n                <button className=\"close-btn\" onClick={onClose}>X</button>\r\n                {/* Edit Controls */}\r\n                {!isEditing ? (\r\n                    <button className=\"edit-btn\" onClick={() => setIsEditing(true)}>\r\n                        Edit Recipe\r\n                    </button>\r\n                ) : (\r\n                    <div className=\"edit-controls\">\r\n                    <button className=\"save-btn\" onClick={handleSaveEdit}>Save</button>\r\n                    <button className=\"cancel-btn\" onClick={() => setIsEditing(false)}>Cancel</button>\r\n                    </div>\r\n                )}\r\n                {isEditing ? (\r\n                    <>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={editedName}\r\n                            onChange={(e) => setEditedName(e.target.value)}\r\n                            className=\"input-field\"\r\n                        />\r\n                        <select\r\n                            value={editedCategory}\r\n                            onChange={(e) => setEditedCategory(e.target.value)}\r\n                            className=\"category-dropdown\"\r\n                        >\r\n                            <option value=\"Breakfast\">Breakfast</option>\r\n                            <option value=\"Lunch\">Lunch</option>\r\n                            <option value=\"Dinner\">Dinner</option>\r\n                            <option value=\"Dessert\">Dessert</option>\r\n                            <option value=\"Snack/Other\">Snack/Other</option>\r\n                        </select>\r\n                        <input\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            onChange={(e) => {\r\n                                const file = e.target.files[0];\r\n                                if (file) {\r\n                                    const reader = new FileReader();\r\n                                    reader.onloadend = () => {\r\n                                        setEditedImage(reader.result); // base64 string\r\n                                    };\r\n                                    reader.readAsDataURL(file);\r\n                                }\r\n                            }}\r\n                            className=\"input-field\"\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {!isEditing && recipe.image && (\r\n                            <img\r\n                                src={recipe.image}\r\n                                alt={recipe.name}\r\n                                className=\"recipe-thumbnail\"\r\n                            />\r\n                        )}\r\n                        <h2 className=\"recipe-card-title\">{recipe.name}</h2>\r\n                        <p className=\"recipe-card-category\">\r\n                            <span className=\"ingredients-label\">Category:</span>{' '}\r\n                            <span className=\"category-value\">{recipe.category}</span>\r\n                        </p>\r\n                    </>\r\n                )}\r\n                <div className=\"ingredients-label\">Ingredients:</div>\r\n                <div className=\"ingredients-container\">\r\n                {isEditing ? (\r\n                    <ul>\r\n                        {editedIngredients.map((item, index) => (\r\n                            <li key={index}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={item}\r\n                                    onChange={(e) => {\r\n                                        const updated = [...editedIngredients];\r\n                                        updated[index] = e.target.value;\r\n                                        setEditedIngredients(updated);\r\n                                    }}\r\n                                    className=\"input-field\"\r\n                                />\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <>\r\n                        <ul>\r\n                            {recipe.ingredients.length > 0 ? (\r\n                                recipe.ingredients.map((item, index) => (\r\n                                    <li key={index}>{item}</li>\r\n                                ))\r\n                            ) : (\r\n                                <li>No ingredients listed</li>\r\n                            )}\r\n                        </ul>\r\n                    </>\r\n                    )}\r\n                </div>\r\n                <button className=\"delete-btn\" onClick={() => { onDelete(recipe.name); onClose(); }}>Delete Recipe</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecipeCard;","import React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport Controls from './Controls';\nimport DonutChart from './DonutChart';\nimport RecipeList from './components/RecipeList';\nimport RecipeCard from './components/RecipeCard';\nimport './App.css';\n\nfunction App() {\n  const [recipes, setRecipes] = useState(() => {\n    const saved = localStorage.getItem('recipes');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [newRecipe, setNewRecipe] = useState('');\n  const [ingredients, setIngredients] = useState ([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [selectedRecipe, setSelectedRecipe] = useState(null);\n  const [newImage, setNewImage] = useState('');\n\n  // Sync recipes to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('recipes', JSON.stringify(recipes));\n  }, [recipes]);\n\n  const handleAdd = () => {\n    if (newRecipe.trim() !== '') {\n      const recipeData = {\n        name: newRecipe,\n        ingredients,\n        category: selectedCategory || 'Uncategorized',\n        image: newImage,\n      };\n      setRecipes([...recipes, recipeData]);\n      setNewRecipe('');\n      setIngredients([]);\n      setSelectedCategory('');\n      setNewImage('');\n    }\n  };\n\n  const handleDelete = () => {\n    if (recipes.length > 0) {\n      setRecipes(recipes.slice(0, -1));\n    }\n  };\n\n  // Update existing recipe\n  const handleUpdateRecipe = (updatedRecipe) => {\n    const updatedRecipes = recipes.map((r) =>\n      r.name === updatedRecipe.name ? updatedRecipe : r\n    );\n    setRecipes(updatedRecipes);\n    if (selectedRecipe && selectedRecipe.name === updatedRecipe.name) {\n      setSelectedRecipe(updatedRecipe);\n    }\n  };\n\n  const handleRandom = () => {\n    if (recipes.length > 0) {\n      const random = recipes[Math.floor(Math.random() * recipes.length)];\n      setSelectedRecipe(random);\n    }\n  };\n\n  // Recipe card display trigger\n  const handleSelectRecipe = (recipe) => {\n    setSelectedRecipe(recipe);\n  };\n\n  const handleCloseCard = () => {\n    setSelectedRecipe(null);\n  };\n\n  const handleDeleteRecipeFromCard = (nameToDelete) => {\n    setRecipes(recipes.filter((r) => r.name !== nameToDelete)); // Delete by name match\n  };\n\n  return (\n    <div style={{ textAlign: 'center', padding: '20px' }}>\n      <Header />\n      <div className=\"main-layout\">\n        <div className=\"left-panel\">\n          <Controls\n            newRecipe={newRecipe}\n            setNewRecipe={setNewRecipe}\n            ingredients={ingredients}\n            setIngredients={setIngredients}\n            handleAdd={handleAdd}\n            handleRandom={handleRandom}\n            handleDelete={handleDelete}\n            selectedCategory={selectedCategory}\n            setSelectedCategory={setSelectedCategory}\n            newImage={newImage}\n            setNewImage={setNewImage}\n          />\n          <DonutChart recipes={recipes} />\n        </div>\n        <div className=\"right-panel\">\n          <RecipeList recipes={recipes} onSelectRecipe={handleSelectRecipe} />\n        </div>\n      </div>\n\n      {/* Recipe Card Popup */}\n      {selectedRecipe && (\n        <RecipeCard recipe={selectedRecipe} onClose={handleCloseCard} onDelete={handleDeleteRecipeFromCard} onUpdate={handleUpdateRecipe} />\n      )}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}